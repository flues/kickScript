## Projekt-Richtlinien für Kickerliga Management System

### Allgemeine Verhaltensregeln

- **Sprache**: Antworte stets auf Deutsch, da dies die Projektsprache ist
- **Code-Sprache**: Verwende englische Bezeichnungen, Variablen, Funktionen und Kommentare im Code
- **Sprachstil**: Verwende kollegiale, allgemeine Formulierungen (nicht förmlich "Sie", aber auch nicht duzen)
- **Code Style**: PSR-12 Extended Coding Style für alle PHP-Dateien (https://www.php-fig.org/psr/psr-12/)
- **Architektur**: Befolge die MVC-Struktur des Slim Frameworks bei allen Code-Änderungen
- **Services**: Führe keine direkten DB-Aufrufe in Controllern durch, nutze stattdessen Services
- **Autoloading**: PSR-4 Autoload-Standard mit `App\\` Namespace für `app/` Verzeichnis

### Dokumentation

- **Primäre Dokumentation**: `.docs/`-Ordner enthält alle Projektdokumentation
- **Feature-Updates**: Bei Änderungen an Features die entsprechenden Dokumentationsdateien aktualisieren
- **Neue Features**: Erst in Dokumentation beschreiben, dann implementieren
- **README-Integration**: Neue .docs-Dateien in README.md verlinken und kategorisieren
- **Status-Updates**: todo.md bei abgeschlossenen Features aktualisieren

### Projektstruktur

```
kickLiga/
├── app/                    # PHP Application Logic (PSR-4: App\)
│   ├── Controllers/        # Request Handler
│   ├── Models/            # Data Models (GameMatch, Player, Season)
│   ├── Services/          # Business Logic (PlayerService, MatchService, etc.)
│   └── Config/            # DI Container & Configuration
├── public/                # Web Root (DocumentRoot hier setzen)
│   ├── assets/           # CSS, JS, Images, Videos
│   └── index.php         # Application Entry Point
├── templates/             # Twig Templates
├── data/                 # JSON Data Storage (NIEMALS web-zugänglich)
├── logs/                 # Application Logs
└── .docs/               # Feature Documentation
```

### Datenspeicherung

- **JSON-Storage**: Alle Daten in JSON-Dateien, keine externe Datenbank
- **File-Locking**: Stets implementieren bei Datenschreibvorgängen
- **DataService**: Für alle Dateioperationen nutzen
- **Backup-sicher**: Bei Updates bestehende Daten migrieren, nicht überschreiben

### Frontend-Entwicklung

- **Theme**: Bootstrap 5 Dark Theme mit transparenten Elementen
- **Video Background**: Backdrop-Filter und moderne Glaseffekte
- **UI-Komponenten**: Gradient-basierte Cards, transparente Navigation
- **Icons**: Phosphor Icons für konsistentes Design
- **Charts**: Chart.js für alle Datenvisualisierungen
- **Responsive**: Mobile-First Ansatz, Touch-optimiert

### Implementierte Core Features ✅

- **ELO-System**: Vollständig mit Tordifferenz-Modifikator implementiert
- **Achievement-System**: 12 verschiedene Achievements automatisch vergeben
- **Tischseiten-Tracking**: Blau vs. Weiß Seitenwahl mit Statistiken (KOMPLETT)
- **Saisonverwaltung**: Mit Archivierung und Rating-Anpassungen
- **Spielerverwaltung**: CRUD + ELO-Historie + Achievement-Anzeige
- **Match-System**: Erfassung + Historie + Seitenstatistiken

### Video Background System

- **Video-Dateien**: In `public/assets/video/` ablegen
- **CSS-Integration**: Feste Positionierung mit transform centering
- **Performance**: Filter und Opacity für optimale Darstellung
- **Transparenz**: Alle UI-Elemente mit rgba/backdrop-filter
- **Fallback**: Graceful degradation wenn Video nicht lädt

### Sicherheit & Best Practices

- **Input Validation**: Alle Benutzereingaben serverseitig validieren
- **XSS-Schutz**: Twig-Escaping für alle Ausgaben
- **Directory Protection**: .htaccess für `data/`, `logs/`, `.docs/` Verzeichnisse
- **Composer**: `vendor/` in .gitignore, bei Setup `composer install` ausführen
- **Berechtigungen**: 775 für `data/` und `logs/` Verzeichnisse

### Migration & Updates

- **Datenkompatibilität**: Bei Model-Änderungen Migration-Scripts erstellen
- **Backwards-Compatibility**: Bestehende JSON-Strukturen erweitern, nicht brechen
- **Default-Werte**: Für neue Felder sinnvolle Defaults setzen
- **Validierung**: Nach Migration Datenintegrität prüfen

### Development Workflow

- **Local Server**: `php -S localhost:8000 -t public` für Entwicklung
- **Dependencies**: `composer install` nach Git-Clone
- **Debugging**: `logs/app.log` für Fehleranalyse
- **Testing**: Edge Cases und verschiedene Datenkonstellationen testen

### Wichtige Dokumentationsdateien

**Architektur & Grundlagen:**
- `project.md` - Hauptprojektdokumentation
- `architektur.md` - Slim Framework Architektur
- `datenmodell.md` - JSON-Dateistrukturen
- `installation.md` - Setup-Anleitung

**Core Features:**
- `elo-system.md` - ELO-Rating-Algorithmus
- `achievements.md` - Achievement-System

**Erweiterte Features:**
- `feature-tischseiten-tracking.md` - Seitenwahl-System (✅ KOMPLETT)
- `feature-achievements-elo-verlauf.md` - Interactive Player Profiles

**Projektmanagement:**
- `todo.md` - Entwicklungsstatus
- `README.md` - Projekt-Übersicht und Navigation

### Git-Management

- **Repository-Root**: Git-Repository im Hauptverzeichnis
- **Ignored Files**: vendor/, logs/, cache/, IDE-Dateien
- **Commit-Style**: Aussagekräftige Messages auf Deutsch
- **Branch-Strategy**: Feature-Branches für größere Änderungen 